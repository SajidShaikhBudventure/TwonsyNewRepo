def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


android {
    signingConfigs {
        release {
            storeFile file('../townsy.jks')
            storePassword 'townsy'
            keyAlias = 'townsy'
            keyPassword 'townsy'
        }
    }
    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.townsy.app"
        minSdkVersion 21
        targetSdkVersion 28

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }
        signingConfig signingConfigs.release
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
        profile {
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.intuit.sdp:sdp-android:1.0.5'
    implementation 'com.makeramen:roundedimageview:2.3.0'

    implementation 'com.google.code.gson:gson:2.8.2'
    implementation "androidx.recyclerview:recyclerview:1.1.0"
//    implementation 'com.mesibo.api:mesibo:1.0.90'
//    implementation 'com.mesibo.api:ui:1.1.32'
//    implementation 'com.mesibo.api:calls:1.0.75'
    implementation 'com.mesibo.api:mesibo:1.0.90'
    /* add this only if you require ready to use Mesibo UI module */
    implementation 'com.mesibo.api:ui:1.1.32'

    implementation 'com.mesibo.api:calls:1.0.75'
    implementation 'com.mesibo.api:ContactUtils:0.1.29'
    /* add this only if you require call functionalities */


    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

}
apply plugin: 'com.google.gms.google-services'